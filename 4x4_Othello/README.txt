|=================================================|
| Names: Nathan Rumsey and Edson Fuentes          |
| Date: 05/17/2023                                |
|                                                 |           
| Class: CS331-001                                |
| Assignment: Assignment 2:  4x4 Othello          |
|=================================================|

-------------------
| Files Included  |
-------------------

ProgAssn2.zip/
├─ Board.py
├─ GameDriver.py
├─ OthelloBoard.py
├─ Players.py
├─ Plot.py
├─ Report.py
├─ run.sh
├─ hq_results.csv
├─ svd_results.csv
├─ README.txt

-----------------------
| Files Descriptions  |
-----------------------
Board.py:
    Starter code provided by instructor. Constains implementation of class Board as well as helper classes.

GameDriver.py:
    Starter code provided by instructor. Contains implementation of a game driver which processes move decisions, 
    updates the game, and prints the board.

OthelloBoard.py:
    Starter code provided by the instructor. Contains implementation of class OthelloBoard which inherits from Board. 
    Contains implementation of methods specific to the game of Othello.

Players.py:
    Contains implementation of classes Player, HumanPlayer, and AlphaBetaPlayer. Player is an abstract class which 
    defines the methods that must be implemented by its subclasses. HumanPlayer is a subclass of Player which 
    implements the methods for a human player. These both were defined by instructor. 
    
    AlphaBetaPlayer is a subclass of Player which implements the methods for an AI player. This class was written by us.
    It contains some pre-written functions by the instructor, but we have implemented the following functions: 
        - get_successors
        - eval_board
        - max_value
        - min_value
        - alphabeta
        - get_move

Plot.py:
    Created by us. Cotnains code used by Report.py to generate plots for the Report.

Report.py:
    Created by us. Contains code used to generate the report. This code runs the game multiple times with different 
    configurations and records the results in csv files. It then uses Plot.py to generate plots on the nodes expanded 
    vs. search depth for the report and prints heuristic quality to the terminal.

run.sh:
    Shell script to run the game with the defined in variables within the file. This script was provided by the 
    instructor, and adapted by us.

hq_results.csv:
    Contains the results of running the game with pruning enabled for both players who are using different heursitics 
    at different search depths. This file was generated by automatically by Report.py, and is submitted if you would 
    like to view data used to generate the Report. Delete this file if you wish to generate new data.

svd_results.csv:
    Contains the results of running the game with pruning disabled for both players who are using different heursitics 
    at different search depths. Tracks the number of search nodes expanded by each player and configuration. This file 
    was generated by automatically by Report.py, and is submitted if you would like to view data used to generate the 
    Report. Delete this file if you wish to generate new data.

README.txt:
    This file.
    
-------------------
| Execution Steps |
-------------------

1. Run the command:`python GameDriver.py $p1type $p2type $p1_eval_type $p1_prune $p2_eval_type $p2_prune $p1_depth $p2_depth`

-------------------------
| Generate Report Steps |
-------------------------

1. If you wish to regenerate the report results, run the command: `rm *.csv`
2. Run the command: `python Report.py`

------------
| Comments |
------------
- All code written by me is commented and documented. This is not the case for the uncommented starter code given to us